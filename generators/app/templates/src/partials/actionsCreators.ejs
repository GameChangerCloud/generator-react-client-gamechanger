<% typesName.forEach(typeName => { _%>
    <% if (!scalarsName.includes(typeName)) { _%>
        <%# Flag actions _%>
        <% let typeNameLowerCase = typeName.toLowerCase() _%>
        <% let typeNameUpperCase = typeName.toUpperCase() _%>
        <% let typeNamePlural = pluralize.plural(typeNameLowerCase) _%>

/* <%- typeName %> */

export const <%- typeNameLowerCase %>LoadRequest = () => ({ type: Actions.ALL_<%- typeNameUpperCase %>_LOAD_REQUEST })
export const <%- typeNameLowerCase %>LoadSuccess = (<%- typeNamePlural %>) => ({ type: Actions.ALL_<%- typeNameUpperCase %>_LOAD_SUCCESS, payload: <%- typeNamePlural %> })
export const <%- typeNameLowerCase %>LoadFailure = (error) => ({ type: Actions.ALL_<%- typeNameUpperCase %>_LOAD_FAILURE, err: true, payload: error})

export const <%- typeNameLowerCase %>LoadByIdRequest = () => ({ type: Actions.<%- typeNameUpperCase %>_LOAD_REQUEST })
export const <%- typeNameLowerCase %>LoadByIdSuccess = (<%- typeNamePlural %>) => ({ type: Actions.<%- typeNameUpperCase %>_LOAD_SUCCESS, payload: <%- typeNamePlural %> })
export const <%- typeNameLowerCase %>LoadByIdFailure = (error) => ({ type: Actions.<%- typeNameUpperCase %>_LOAD_FAILURE, err: true, payload: error})

export const <%- typeNameLowerCase %>AddRequest = (<%- typeNameLowerCase %>) => ({ type: Actions.<%- typeNameUpperCase %>_ADD_REQUEST, payload: <%- typeNameLowerCase %> })
export const <%- typeNameLowerCase %>AddSuccess = (<%- typeNamePlural %>) => ({ type: Actions.<%- typeNameUpperCase %>_ADD_SUCCESS, payload: <%- typeNamePlural %> })
export const <%- typeNameLowerCase %>AddFailure = (error) => ({ type: Actions.<%- typeNameUpperCase %>_ADD_FAILURE, err: true, payload: error})

export const <%- typeNameLowerCase %>UpdateRequest = (<%- typeNameLowerCase %>) => ({ type: Actions.<%- typeNameUpperCase %>_UPDATE_REQUEST })
export const <%- typeNameLowerCase %>UpdateSuccess = (<%- typeNamePlural %>) => ({ type: Actions.<%- typeNameUpperCase %>_UPDATE_SUCCESS, payload: <%- typeNamePlural %> })
export const <%- typeNameLowerCase %>UpdateFailure = (error) => ({ type: Actions.<%- typeNameUpperCase %>_UPDATE_FAILURE, err: true, payload: error})

export const <%- typeNameLowerCase %>DeleteRequest = (id) => ({ type: Actions.<%- typeNameUpperCase %>_DELETE_REQUEST, payload: id })
export const <%- typeNameLowerCase %>DeleteSuccess = (<%- typeNamePlural %>) => ({ type: Actions.<%- typeNameUpperCase %>_DELETE_SUCCESS, payload: <%- typeNamePlural %> })
export const <%- typeNameLowerCase %>DeleteFailure = (error) => ({ type: Actions.<%- typeNameUpperCase %>_DELETE_FAILURE, err: true, payload: error})

<%# API actions %>
export const <%- typeNameLowerCase %>Load = () => dispatch => {
    // Flag : we're loading
    dispatch(<%- typeNameLowerCase %>LoadRequest())
    
    const params = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Authorization: 'Bearer ' + store.getState().session.credentials.idToken },
        body: JSON.stringify({
            query: utils.constructQuery(Queries.GET_ALL, "<%- typeName %>", null)
        })
    }

    // Now we do the actual loading 
    fetch(APIurl, params)
    .then(res => res.json())
    .then(payload => {
        if(payload.errors)
            dispatch(<%- typeNameLowerCase %>LoadFailure(payload.errors))
        else if(payload.errorMessage)
            dispatch(<%- typeNameLowerCase %>LoadFailure(payload.errorMessage))
        else
            dispatch(<%- typeNameLowerCase %>LoadSuccess(payload))
    })
    .catch(err => {
        dispatch(<%- typeNameLowerCase %>LoadFailure(err))
    })

}
    
export const <%- typeNameLowerCase %>LoadById = (id) => dispatch => {

    // Flag : we're loading
    dispatch(<%- typeNameLowerCase %>LoadByIdRequest())

    const params = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Authorization: 'Bearer ' + store.getState().session.credentials.idToken },
        body: JSON.stringify({
            query: utils.constructQuery(Queries.GET_BY_ID, "<%- typeName %>", id)
        })
    }

    // Now we do the actual loading 
    fetch(APIurl, params)
    .then(res => res.json())
    .then(payload => {
        if(payload.errors)
            dispatch(<%- typeNameLowerCase %>LoadByIdFailure(payload.errors))
        else if(payload.errorMessage)
            dispatch(<%- typeNameLowerCase %>LoadByIdFailure(payload.errorMessage))
        else
            dispatch(<%- typeNameLowerCase %>LoadByIdSuccess(payload))
    })
    .catch(err => {
        dispatch(<%- typeNameLowerCase %>LoadByIdFailure(err))
    })

}

export const <%- typeNameLowerCase %>Add = (<%- typeNameLowerCase %>) => dispatch => {

    // Flag : we're loading
    dispatch(<%- typeNameLowerCase %>AddRequest(<%- typeNameLowerCase %>))

    const params = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Authorization: 'Bearer ' + store.getState().session.credentials.idToken },
        body: JSON.stringify({
            query: utils.constructQuery(Queries.ADD, "<%- typeName %>", <%- typeNameLowerCase %>)
        })
    }

    // Now we do the actual loading 
    fetch(APIurl, params)
    .then(res => res.json())
    .then(payload => {
        if(payload.errors)
            dispatch(<%- typeNameLowerCase %>AddFailure(payload.errors))
        else if(payload.errorMessage)
            dispatch(<%- typeNameLowerCase %>AddFailure(payload.errorMessage))
        else
            dispatch(<%- typeNameLowerCase %>AddSuccess(payload.data.<%- typeNameLowerCase %>Create))
    })
    .then(() => {
        dispatch(<%- typeNameLowerCase %>Load())
    })
    .catch(err => {
        dispatch(<%- typeNameLowerCase %>AddFailure(err))
    })
}

export const <%- typeNameLowerCase %>Update = (<%- typeNameLowerCase %>) => dispatch => {

    // Flag : we're loading
    dispatch(<%- typeNameLowerCase %>UpdateRequest(<%- typeNameLowerCase %>))

    const params = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Authorization: 'Bearer ' + store.getState().session.credentials.idToken },
        body: JSON.stringify({
            query: utils.constructQuery(Queries.UPDATE, "<%- typeName %>", <%- typeNameLowerCase %>)
        })
    }

    // Now we do the actual loading 
    fetch(APIurl, params)
    .then(res => res.json())
    .then(payload => {
        if(payload.errors)
            dispatch(<%- typeNameLowerCase %>UpdateFailure(payload.errors))
        else if(payload.errorMessage)
            dispatch(<%- typeNameLowerCase %>UpdateFailure(payload.errorMessage))
        else
            dispatch(<%- typeNameLowerCase %>UpdateSuccess(payload.data.<%- typeNameLowerCase %>Update)) 
    })
    .then(() => {
        dispatch(<%- typeNameLowerCase %>Load())
    })
    .catch(err => {
        dispatch(<%- typeNameLowerCase %>UpdateFailure(err))
    })
}
    

export const <%- typeNameLowerCase %>Delete = (id) => dispatch => {

    dispatch(<%- typeNameLowerCase %>DeleteRequest(id))
    const params = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Authorization: 'Bearer ' + store.getState().session.credentials.idToken },
        body: JSON.stringify({
            query: utils.constructQuery(Queries.DELETE, "<%- typeName %>", id)
        })
    }

    fetch(APIurl, params)
    .then(res => res.json())
    .then(payload => {
        if(payload.errors)
            dispatch(<%- typeNameLowerCase %>DeleteFailure(payload.errors))
        else if(payload.errorMessage)
            dispatch(<%- typeNameLowerCase %>DeleteFailure(payload.errorMessage))
        else
            dispatch(<%- typeNameLowerCase %>DeleteSuccess(payload.data.<%- typeNameLowerCase %>Delete))
    })
    .then(() => {
        dispatch(<%- typeNameLowerCase %>Load())
    })
    .catch(err => {
        dispatch(<%- typeNameLowerCase %>DeleteFailure(err))
    })
}
    <%_ } _%>
<%_ }) _%>